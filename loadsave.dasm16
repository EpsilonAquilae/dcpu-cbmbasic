.MACRO DO_A(aSub, anArg)
      SET A, anArg
      JSR aSub
.ENDMACRO

; stub for loading a demo from another part of RAM
:STMT_LOAD
    SET I, DEMO
    SET J, BASICMEM+1
:LOADLOOP
	STI [J], [I]
	IFL I, DEMO_END
	    JMP LOADLOOP
	SET [VARTAB], J
	JSR FIX_LINKS
	RTS
    
:STMT_SAVE
    RTS
:STMT_VERIFY
; Not the real verify command but allows me to see
; various memory sizes at a glance
    ; display basic text size
        DO_A(STROUT, TXT_H)
        DO_A(LINPRT, [TXTTAB])
        DO_A(CHROUT, 32)
        SET A, [VARTAB]
        SUB A, [TXTTAB]
        JSR LINPRT
        DO_A(CHROUT, CBM_RETURN)
    ; display scalar variable size
        DO_A(STROUT, VAR_H)
        DO_A(LINPRT, [VARTAB])
        DO_A(CHROUT, 32)
        SET A, [ARYTAB]
        SUB A, [VARTAB]
        JSR LINPRT
        DO_A(CHROUT, CBM_RETURN)
    ; display array variable size
        DO_A(STROUT, ARY_H)
        DO_A(LINPRT, [ARYTAB])
        DO_A(CHROUT, 32)
        SET A, [STREND]
        SUB A, [ARYTAB]
        JSR LINPRT
        DO_A(CHROUT, CBM_RETURN)
    ; display free space size
        DO_A(STROUT, FREE_H)
        DO_A(LINPRT, [STREND])
        DO_A(CHROUT, 32)
        SET A, [FREETOP]
        SUB A, [STREND]
        JSR LINPRT
        DO_A(CHROUT, CBM_RETURN)
    ; display string size
        DO_A(STROUT, STR_H)
        DO_A(LINPRT, [FREETOP])
        DO_A(CHROUT, 32)
        SET A, [MEMSIZ]
        SUB A, [FREETOP]
        JSR LINPRT
        DO_A(CHROUT, CBM_RETURN)
        RTS

:TXT_H  DAT "TXT: ", 0
:VAR_H  DAT "VAR: ", 0
:ARY_H  DAT "ARY: ", 0
:FREE_H  DAT "FREE:", 0
:STR_H  DAT "STR: ", 0


.include "demo.dasm16"
